/*
use algebra parser to compare student input
*/
global parser = new CTATAlgebraParser(new CTATVariableTable());

function getSkillForTrans(operation, operand) {
	var skill = '';
	switch(operation) {
		case 'division-simple':
		case 'division-complex':
		case 'multiplication':
			skill = operation;
		break;
		case 'subtraction':
		case 'addition':
			skill = operation+(operand.includes('x') ? '-var' : '-const');
		break;
	}
	return skill;
}

function setParser(){
	CTATAlgebraParser.theParser = parser;
}

function isConst(term) {
	return __isConst(term);
}

function hasDivTerm(exp) {
	return __hasDivTerm(exp);
}

function hasConstTerm(exp) {
	var terms = exp.terms;
	for (var i = 0; i < terms.length; i++) {
		if (isConst(terms[i])) {
			return true;
		}
	}
	return false;
}

function hasVarTerm(exp) {
	var terms = exp.terms;
	for (var i = 0; i < terms.length; i++) {
		if (!isConst(terms[i])) {
			return true;
		}
	}
	return false;
}

function getVarTerms(exp) {
	var terms = exp.terms,
		varTerms = [];
	for (var i = 0; i < terms.length; i++) {
		if (!isConst(terms[i])) {
			varTerms.push(terms[i]);
		}
	}
	return varTerms;
}

function getConstTerms(exp) {
	var terms = exp.terms,
		constTerms = [];
	for (var i = 0; i < terms.length; i++) {
		if (isConst(terms[i])) {
			constTerms.push(terms[i]);
		}
	}
	return constTerms;
}

function getUnknownTerms(exp) {
	var terms = exp.terms,
		unknownTerms = [];
	for (var i = 0; i < terms.length; i++) {
		if (terms[i].type === "unknownTerm") {
			unknownTerms.push(terms[i]);
		}
	}
	return unknownTerms;
}

function getSimpType(ci) {
	return ci.simplification ? ci.simplification.rule : null;
}

function getCurrentDiagramType(p) {
	return p.currentDiagram ? p.currentDiagram.operation : null;
}

/*
@param facts: list of all facts, Expr, simpleTerm, productTerm, that need to be asserted after recursive calls
@param fact: the one fact that will be asserted in the current function execution
*/
function generateFact(facts,fact){
	var newFact;
	switch(fact.type){
		case "simpleTerm" :
			newFact = new simpleTerm(fact.coeff, fact.var,  fact.side);
			break;
		case "divTerm" :
			var factors = [];
			fact.factors.forEach(function(idx){
				factors.push(facts[idx]);
			});
			newFact = new divTerm(factors, fact.side);
			break;
		case "productTerm" :
			var factors = [];
			fact.factors.forEach(function(idx){
				factors.push(facts[idx]);
			});
			newFact = new productTerm(factors, fact.side);
			break;
		case "Expr" :
			var terms = [];
			fact.terms.forEach(function(idx){
				terms.push(facts[idx]);
			});
			newFact = new Expr(fact.side,terms,fact.topLevel);
			break;
		default :
			return;
	}
	var idx = facts.indexOf(fact);
	facts[idx] = newFact;
	assert(newFact);
}

/*
@param terms: list of all the terms
@param side: side
@result return true if there is a term in the list of terms that is on the side
*/
function termToBeCancelOnSide(terms,side){
	for(var i = 0; i < terms.length; i++){
		if(terms[i].side === side){
			return true;
		}
	}
	return false;
}

/*
@param e: expression
change all the term in the expression e to be the opposite side
*/
function swapTermSide(e){
	var terms = [];
	getAllTerms(e,terms);
	terms.forEach(function(term){
		var newSide = oppositeSide(term.side);
		modify(term,"side",newSide);
	});
}

function compSimpleTerms(t1, t2) {
	return t1.var === t2.var && t1.coeff === t2.coeff;
}

function genPartialTransformation(e1, e2, operation, operand, ci) {
	var ptList = getFacts("PartialTransformation"),
		pt;
	if (!ptList.length && ci.stepType === "operator") {
		//no pt started yet
		pt = assert(new PartialTransformation(e1, e2, operation));
	} else if (ptList.length === 1) {
		pt = ptList[0];
		if (pt.operator === operation) { 
			if (ci.stepType === "operand") {
				if (!pt.operand) {
					//pt started, first operand dragged
					modify(pt, "operand", operand);
				} else if (!compSimpleTerms(pt.operand, operand)) {
					//different operand already set for this pt, backtrack
					return null;
				}
			} else {
				//second operator dragged
				modify(pt, "operator2Selected", true);
			}
		} else {
			//different operator already set for this pt, backtrack
			return null;
		}
	} else if (ptList.length > 1) {
		throw new Error("something's wrong in genPartialTransformation ( > 1 pt's in WM )");
	}
	return pt;
}

function applyPartialTransformation(exp, pt, inclOperand) {
	var expStr = eqStr(exp.terms),
		operandStr = inclOperand ? simpleTermStr({var: pt.operand.var, coeff: pt.operand.coeff}) : "?" ;
	switch(pt.operator) {
		case 'addition': 
			expStr += " + "+operandStr;
		break;
		case 'subtraction':
			expStr += " - "+operandStr;
		break;
		case 'division': 
			expStr = '('+expStr+')/'+operandStr;
		break;
		case 'multiplication':
			expStr = operandStr+'*('+expStr+')';
		break;
	}
	
	return expStr;
}

function clearInterfaceElements(ie1, ie2) {
	modify(ie1, "operator", null);
	modify(ie2, "operator", null);
	modify(ie1, "operand", null);
	modify(ie2, "operand", null);
}

/** 	TRANSFORMATION FUNCTIONS 	**/
function divideExpBy(exp, divisorVal, side, p) {
	var c = divisorVal.coeff,
		v = divisorVal.var;
	
	var newTopTerms = exp.terms.slice();
	var divisorTerm = assert(new simpleTerm(c, v, side));
	var newTopExpr = assert(new Expr(side, newTopTerms, false));
	var newBtmExpr = assert(new Expr(side, [divisorTerm], false));
	var newDivTerm = assert(new divTerm([newTopExpr, newBtmExpr], side));
	modify(exp, "terms", [newDivTerm]);
	
	modify(p, "dividedBy", c+(v?v:''));
	return exp;
}

function multiplyExpBy(exp, multVal, side, p) {
	var c = multVal.coeff,
		v = multVal.var;
	
	var newFactorTerms = exp.terms.slice();
	var multiplierTerm = assert(new simpleTerm(c, v, side));
	var newFactorExpr1 = assert(new Expr(side, newFactorTerms, false));
	var newFactorExpr2 = assert(new Expr(side, [multiplierTerm], false));
	var newProductTerm = assert(new productTerm([newFactorExpr1, newFactorExpr2], side));
	modify(exp, "terms", [newProductTerm]);
	return exp;
}

function addTermToExp(probFact, exp, termCoeff, termVar, side, cancelTerm) {
	var movedTerms = probFact.movedSimpleTerms;
	var termCancel = probFact.termToBeCanceled;
	var newTerm = assert(new simpleTerm(termCoeff, termVar, side));	
	var newTerms = exp.terms.slice();
	newTerms.push(newTerm);
	modify(exp, "terms", newTerms);
	
	//keep record of all moved Terms
	var newMovedTerms = movedTerms.slice();
	newMovedTerms.push(newTerm);
	
	//keep record of all terms to be canceled
	if (cancelTerm) {
		var newTermCancel = termCancel.slice();
		newTermCancel.push(cancelTerm);
		newTermCancel.push(newTerm);
		newMovedTerms.push(cancelTerm);
		modify(probFact,"termToBeCanceled",newTermCancel);
	}
	modify(probFact,"movedSimpleTerms",newMovedTerms);
	
	//keep record of variable and constant side
	if (!probFact.variableSide) {
		let cs = (!!termVar === !!cancelTerm) ? side : (side === "right" ? "left" : "right");
		let vs = (cs === "right") ? "left" : "right";
		modify(probFact,"constantSide",cs);
		modify(probFact,"variableSide",vs);
	}
}

function applyTransformation(probFact, pt) {
	var e1 = pt.exp1,
		e2 = pt.exp2,
		operand = pt.operand,
		coeff = operand.coeff;
	switch(pt.operator) {
		case 'subtraction':
			coeff = -1*coeff;
		case 'addition':
			addTermToExp(probFact, e1, coeff, operand.var, e1.side, (e1.terms.indexOf(operand) >= 0 ? operand : null));
			addTermToExp(probFact, e2, coeff, operand.var, e2.side, (e2.terms.indexOf(operand) >= 0 ? operand : null));
		break;
		case 'division': 
			divideExpBy(e1, operand, e1.side, probFact);
			divideExpBy(e2, operand, e2.side, probFact);
		break;
		case 'multiplication':
			multiplyExpBy(e1, operand, e1.side);
			multiplyExpBy(e2, operand, e2.side);
		break;
	}
}

function copyTerm(term) {
	var copy = null;
	if (term.type === "simpleTerm") {
		copy = new simpleTerm(term.coeff, term.var, term.side);
	} else {
		var newFactors = [];
		term.factors.forEach((factor) => {
			let newTerms = [];
			factor.terms.forEach((term) => {
				newTerms.push(assert(new simpleTerm(term.coeff, term.var, term.side)));
			});
			newFactors.push(assert(new Expr(factor.side, newTerms, factor.topLevel)));
		});
		if (term.type === "divTerm") {
			copy = new divTerm(newFactors, term.side);
		} else {
			copy = new productTerm(newFactors, term.side);
		}
	}
	return copy;
}